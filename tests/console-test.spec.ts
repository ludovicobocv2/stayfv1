import { test, expect } from '@playwright/test';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente do arquivo .env.test
dotenv.config({ path: '.env.test' });

const testEmail = process.env.TEST_USER_EMAIL;
const testPassword = process.env.TEST_USER_PASSWORD;
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Verificar se todas as vari√°veis de ambiente necess√°rias est√£o definidas
if (!testEmail || !testPassword || !supabaseUrl || !supabaseAnonKey) {
  throw new Error('Vari√°veis de ambiente necess√°rias n√£o est√£o definidas');
}

console.log('Vari√°veis de ambiente carregadas:');
console.log('TEST_USER_EMAIL:', testEmail);
console.log('SUPABASE_URL:', supabaseUrl);
console.log('SUPABASE_ANON_KEY:', supabaseAnonKey);

test('monitor sync and request issues', async ({ page }) => {
  // Mapear requisi√ß√µes para detectar duplica√ß√µes
  const requestMap = new Map();
  let syncStatusResponse: any = null;
  
  // Criar cliente Supabase para teste
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Fazer login com usu√°rio de teste
  console.log('Tentando fazer login com:', testEmail);
  const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
    email: testEmail,
    password: testPassword
  });

  if (authError) {
    console.error('Erro ao autenticar:', authError);
    throw authError;
  }

  console.log('Login bem-sucedido:', authData);
  
  // Monitorar requisi√ß√µes ao Supabase
  page.on('request', request => {
    if (request.url().includes('supabase')) {
      const url = request.url();
      const count = requestMap.get(url) || 0;
      requestMap.set(url, count + 1);
      
      console.log(`üì° [${new Date().toISOString()}] Requisi√ß√£o #${count + 1} - ${request.method()} ${url}`);
      
      // Log do corpo da requisi√ß√£o para POST/PUT
      if (['POST', 'PUT'].includes(request.method())) {
        const data = request.postData();
        console.log('Corpo da requisi√ß√£o:', data);
        
        // Identificar chamada de teste de sincroniza√ß√£o
        if (url.includes('test_sync_status')) {
          console.log('üîÑ Verificando status de sincroniza√ß√£o...');
          try {
            const body = JSON.parse(data || '{}');
            console.log('Par√¢metros de sincroniza√ß√£o:', body);
          } catch (e) {
            console.log('N√£o foi poss√≠vel parsear o corpo da requisi√ß√£o:', e);
          }
        }
      }
    }
  });

  // Monitorar respostas do Supabase
  page.on('response', async response => {
    if (response.url().includes('supabase')) {
      const url = response.url();
      console.log(`üì• [${new Date().toISOString()}] Resposta ${response.status()} para ${url}`);
      
      try {
        const responseBody = await response.text();
        
        // Capturar resposta do status de sincroniza√ß√£o
        if (url.includes('test_sync_status')) {
          try {
            syncStatusResponse = JSON.parse(responseBody);
            console.log('Status de sincroniza√ß√£o:', syncStatusResponse);
          } catch (e) {
            console.error('Erro ao parsear resposta de sincroniza√ß√£o:', e);
            console.log('Resposta bruta:', responseBody);
          }
        }
        
        // Se for erro, logar detalhes
        if (response.status() >= 400) {
          console.log('Detalhes da resposta de erro:', responseBody);
          try {
            const errorJson = JSON.parse(responseBody);
            console.log('Erro estruturado:', errorJson);
          } catch {
            console.log('Resposta de erro n√£o √© JSON v√°lido');
          }
        }
      } catch (e) {
        console.log('N√£o foi poss√≠vel ler o corpo da resposta:', e);
      }
    }
  });

  // Capturar erros de rede
  page.on('requestfailed', request => {
    console.log(`‚ùå [${new Date().toISOString()}] Falha na requisi√ß√£o: ${request.url()}`);
    console.log('Erro:', request.failure()?.errorText);
  });

  // Navegar para a p√°gina
  console.log('üöÄ Iniciando monitoramento...');
  await page.goto('http://localhost:3000');
  
  // Aguardar carregamento inicial
  await page.waitForLoadState('networkidle');
  console.log('üìã P√°gina carregada, analisando padr√µes de requisi√ß√£o...');

  // Testar fun√ß√£o de sincroniza√ß√£o diretamente
  try {
    const { data, error } = await supabase.rpc('test_sync_status', {
      test_user_id: authData.user?.id
    });
    
    if (error) {
      console.error('‚ùå Erro ao testar sincroniza√ß√£o:', error);
    } else {
      console.log('‚úÖ Teste de sincroniza√ß√£o bem-sucedido:', data);
      syncStatusResponse = data;
    }
  } catch (e) {
    console.error('‚ùå Exce√ß√£o ao testar sincroniza√ß√£o:', e);
  }

  // Aguardar tempo suficiente para sincroniza√ß√£o inicial e teste de status
  await page.waitForTimeout(2000);

  // Analisar resultados
  console.log('\nüìä An√°lise de Requisi√ß√µes:');
  
  // Verificar duplica√ß√µes
  let hasDuplicates = false;
  Array.from(requestMap).forEach(([url, count]) => {
    if (count > 1) {
      hasDuplicates = true;
      console.log(`‚ö†Ô∏è Requisi√ß√£o duplicada (${count}x): ${url}`);
    }
  });

  // Verificar status de sincroniza√ß√£o
  if (syncStatusResponse) {
    console.log('\nüîÑ Resultado do Status de Sincroniza√ß√£o:');
    console.log('Status:', syncStatusResponse.status);
    console.log('√öltima sincroniza√ß√£o:', new Date(syncStatusResponse.last_sync).toLocaleString());
    console.log('Mudan√ßas pendentes:', syncStatusResponse.pending_changes ? 'Sim' : 'N√£o');
  } else {
    console.log('\n‚ö†Ô∏è N√£o foi poss√≠vel obter o status de sincroniza√ß√£o');
  }

  // Validar resultados
  expect(hasDuplicates, 'N√£o deveria haver requisi√ß√µes duplicadas').toBe(false);
  if (syncStatusResponse) {
    expect(syncStatusResponse.status, 'Status de sincroniza√ß√£o deveria ser success').toBe('success');
  } else {
    throw new Error('Teste de sincroniza√ß√£o falhou: n√£o foi poss√≠vel obter o status');
  }

  // Fazer logout
  await supabase.auth.signOut();
}); 